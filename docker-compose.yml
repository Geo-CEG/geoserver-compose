version: '3.6'

volumes:
  db_backups:
    name: geoserver_postgis_backups

  geoserver_data:
    name: geoserver_data
    # /geoserver/gwc is the GEOWEBCACHE_CACHE_DIR and contains geowebcache.xml

  geoserver_pgadmin:
    name: geoserver_pgadmin

services:
  db-backups:
    container_name: geoserver-db-backup
    image: kartoza/pg-backup:11.0
    env_file: .env
    environment:
      PGUSER: postgres
      PGPASSWORD: ${DB_ADMIN_PASSWORD}
      PGHOST: bellman
    networks:
      - postgis_net
    volumes:
      - db_backups:/backups
    restart: unless-stopped

  geoserver:
    container_name: geoserver
    image: wildsong/geoserver:latest
    env_file: .env
    environment:
      ENABLE_JSONP: "true"
      VIRTUAL_HOST: ${GEOSERVER_VIRTUAL_HOST}
      VIRTUAL_PORT: 8080
      NETWORK_ACCESS: internal
      LETSENCRYPT_HOST: ${GEOSERVER_VIRTUAL_HOST}
      LETSENCRYPT_MAIL: ${MY_EMAIL}
      GEOSERVER_DATA_DIR: /geoserver
      GEOWEBCACHE_DATA_DIR: /geoserver/gwc
      GEOSERVER_CSRF_WHITELIST: ${GEOSERVER_CSRF_WHITELIST}
      GEOSERVER_CSRF_DISABLED: ${GEOSERVER_CSRF_DISABLED}
    networks:
      - proxy_net
      - postgis_net
    expose:
      - "8080"
    ports:
      - "8080:8080"
    volumes:
      - geoserver_data:/geoserver
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile.geoserver
   
  web-server:
    container_name: geoserver-web
    image: nginx:alpine
    networks:
      - proxy_net
    env_file: .env
    environment:
      VIRTUAL_HOST: ${WEB_SERVER}
      LETSENCRYPT_HOST: ${WEB_SERVER}
      LETSENCRYPT_MAIL: ${WEB_SERVER_MAIL}
      NETWORK_ACCESS: internal
    expose:
      - "80"
    volumes:
      # I am binding this to a filesystem on the host
      # for now to make updating content easier.
      - /var/www/maps/html:/usr/share/nginx/html
    restart: unless-stopped
 
  pgadmin:
    container_name: geoserver-pgadmin
    env_file: .env
    # dpage/pgadmin4 is the official release
    image: dpage/pgadmin4:5.5
    networks:
      - proxy_net
      - postgis_net
# Use this when running behind reverse proxy      
    expose:
      - "80"
# Only open this up for test, "expose" + proxy is the normal setup.
#    ports:
#      - "80:80"
    volumes:
      # Session data, user files, config files, config database go here.
      - geoserver_pgadmin:/var/lib/pgadmin
    environment:
      VIRTUAL_HOST: ${PGADMIN_VIRTUAL_HOST}
      VIRTUAL_PORT: 80
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_USER}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      # Added SCRIPT_NAME to solve this problem: https://stackoverflow.com/questions/46381668/pgadmin4-wont-work-in-specific-location-behind-nginx
#      SCRIPT_NAME: /pgadmin4
      NETWORK_ACCESS: internal
      LETSENCRYPT_HOST: ${PGADMIN_VIRTUAL_HOST}
      LETSENCRYPT_MAIL: ${MY_EMAIL}

networks:
  # This is a network we share with our reverse proxy
  proxy_net:
    name: proxy_net
    # Won't be created or destroyed with docker-compose up|down
    external: true

  # This network is only used for database access
  postgis_net:
    name: postgis_net
